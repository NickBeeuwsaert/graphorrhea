openapi: "3.0.1"
servers:
  - url: /api/v1
info:
  title: Notes API
  version: "1"
paths:
  /auth/register:
    summary: Register a new user
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "A use was created successfully"
          content:
            application/json:
              schema:
                type: object
  /auth/login:
    summary: Get a access token and refresh token
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "A token pair to use to access the API"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
        403:
          description: "When the authentication fails"
  /auth/renew:
    summary: |
      Take a valid refresh token, and return a new token pair
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
      responses:
        200:
          description: "A new token pair."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
  /files:
    summary: Browse the notebook
    parameters:
      - in: query
        name: path
        examples:
          rootPath:
            value: "/"
            summary: "Root notebook"
          nestedPathToFile:
            value: "/some/path/to/file.rst"
            summary: "Nested path to a file"
          nestedPath:
            value: "/some/path"
            summary: "a few levels of nesting"
        schema:
          $ref: "#/components/schemas/Path"
    get:
      responses:
        200:
          description: Either a directory listing or a note
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Note"
                  - $ref: "#/components/schemas/Directory"
    post:
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Directory"
                - $ref: "#/components/schemas/Note"

      responses:
        200:
          description: Create a new directory or note
          content:
            application/json:
              schema:
                type: object
    put:
      responses:
        200:
          description: Save a note
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Note"

  # /notebook:
  #   summary: Get a notebook's contents
  #   parameters:
  #     - in: query
  #       name: path
  #       examples:
  #         rootPath:
  #           value: "/"
  #           summary: "Root notebook"
  #         nestedPath:
  #           value: "/notebook"
  #           summary: "Notebook in root"
  #       schema:
  #         $ref: "#/components/schemas/Path"
  #   get:
  #     responses:
  #       200:
  #         description: List of notebook contents
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               required: [entries, path]
  #               properties:
  #                 path:
  #                   type: string
  #                 entries:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/NotebookItem"
  #             example:
  #               - type: "notebook"
  #                 name: "my_notebook"
  #               - type: "note"
  #                 name: "some_note"
  # /note:
  #   summary: get a note
  #   get:
  #     parameters:
  #       - in: query
  #         name: path
  #         examples:
  #           rootNote:
  #             value: "/"
  #           subnotebookNote:
  #             value: "/someNotebook"
  #         schema:
  #           $ref: "#/components/schemas/Path"
  #     responses:
  #       200:
  #         description: The requested note
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/Note"
  #   post:
  #     parameters:
  #       - in: query
  #         name: path
  #         examples:
  #           note:
  #             value: "/someNote"
  #         schema:
  #           $ref: "#/components/schemas/Path"
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             required: ["content"]
  #             properties:
  #               content:
  #                 type: string
  #     responses:
  #       200:
  #         description: Create or update a note
  #         content:
  #           application/json:
  #             schema:
  #               type: object

components:
  schemas:
    TokenPair:
      type: object
      required: [token]
      properties:
        token:
          type: string
        refresh_token:
          type: string
    Directory:
      type: object
      required: [type, entries]
      properties:
        type:
          type: string
          enum: [directory]
        entries:
          type: array
          items:
            $ref: "#/components/schemas/DirectoryItem"

    DirectoryItem:
      type: object
      required: [type, name]
      properties:
        type:
          type: string
          enum: [directory, note]
        name:
          type: string
    Path:
      oneOf:
        - type: string
          pattern: "^(/[a-z.0-9]+)+$"
        - type: string
          pattern: "^/$"
    Note:
      type: object
      required: [type, content]
      properties:
        type:
          type: string
          enum: [note]
        content:
          type: string
        owner:
          type: string
        mimetype:
          type: string
          enum:
            - text/x-rst
            - text/markdown
    Error:
      type: object
      required:
        - message
      properties:
        exception:
          type: string
        message:
          type: string
        field:
          type: string
  responses:
    ValidationError:
      description: OpenAPI request/response validation failed
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Error"
